[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "check_if_exists_in_pinecone",
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "isExtraImport": true,
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "embed_and_add_to_pinecone",
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "isExtraImport": true,
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "rerank_results",
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "isExtraImport": true,
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "isExtraImport": true,
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "index",
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "isExtraImport": true,
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "youtube_download_module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "youtube_download_module",
        "description": "youtube_download_module",
        "detail": "youtube_download_module",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pinecone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pinecone",
        "description": "pinecone",
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "YoutubeDL",
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "isExtraImport": true,
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "VectorModel",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class VectorModel(BaseModel):\n    id: str\n    vector: List[float]\nclass QueryModel(BaseModel):\n    vector: List[float]\n    top_k: int = Field(default=10, ge=1, le=100)\n# Helper Functions\ndef is_valid_youtube_url(url: str) -> bool:\n    \"\"\"Checks if a URL is a valid YouTube video or playlist URL.\"\"\"\n    youtube_regex = re.compile(r\"(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=)?(?:playlist\\?list=)?([a-zA-Z0-9_-]+)\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "QueryModel",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class QueryModel(BaseModel):\n    vector: List[float]\n    top_k: int = Field(default=10, ge=1, le=100)\n# Helper Functions\ndef is_valid_youtube_url(url: str) -> bool:\n    \"\"\"Checks if a URL is a valid YouTube video or playlist URL.\"\"\"\n    youtube_regex = re.compile(r\"(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=)?(?:playlist\\?list=)?([a-zA-Z0-9_-]+)\")\n    return bool(youtube_regex.match(url))\n# API Endpoints\n@app.get(\"/health\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "is_valid_youtube_url",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def is_valid_youtube_url(url: str) -> bool:\n    \"\"\"Checks if a URL is a valid YouTube video or playlist URL.\"\"\"\n    youtube_regex = re.compile(r\"(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=)?(?:playlist\\?list=)?([a-zA-Z0-9_-]+)\")\n    return bool(youtube_regex.match(url))\n# API Endpoints\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint.\"\"\"\n    return {\"status\": \"healthy\"}\n@app.get(\"/indexes\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Models",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_embedding",
        "kind": 2,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "def get_embedding(text):\n    \"\"\"Generate embedding for given text.\"\"\"\n    return model.encode(text).tolist()\ndef check_if_exists_in_pinecone(id):\n    \"\"\"Check if a vector with given id exists in Pinecone.\"\"\"\n    try:\n        response = index.fetch([id])\n        exists = id in response['vectors']\n        logger.info(f\"Check if exists in Pinecone for ID {id}: {exists}\")\n        return exists",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "check_if_exists_in_pinecone",
        "kind": 2,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "def check_if_exists_in_pinecone(id):\n    \"\"\"Check if a vector with given id exists in Pinecone.\"\"\"\n    try:\n        response = index.fetch([id])\n        exists = id in response['vectors']\n        logger.info(f\"Check if exists in Pinecone for ID {id}: {exists}\")\n        return exists\n    except Exception as e:\n        logger.error(f\"Error checking existence in Pinecone: {e}\")\n        raise",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "embed_and_add_to_pinecone",
        "kind": 2,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "def embed_and_add_to_pinecone(id, vector, title):\n    \"\"\"Add a vector to Pinecone index.\"\"\"\n    try:\n        index.upsert([(id, vector, {'title': title})])\n        logger.info(f\"Added vector to Pinecone with ID {id}\")\n    except Exception as e:\n        logger.error(f\"Error adding to Pinecone: {e}\")\n        raise\ndef rerank_results(query_vector, results):\n    \"\"\"Rerank results based on cosine similarity.\"\"\"",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "rerank_results",
        "kind": 2,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "def rerank_results(query_vector, results):\n    \"\"\"Rerank results based on cosine similarity.\"\"\"\n    try:\n        ranked_results = sorted(results, key=lambda x: cosine_similarity(query_vector, x[1]), reverse=True)\n        logger.info(\"Results reranked based on cosine similarity.\")\n        return ranked_results\n    except Exception as e:\n        logger.error(f\"Error during reranking: {e}\")\n        raise\ndef cosine_similarity(vec1, vec2):",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "kind": 2,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "def cosine_similarity(vec1, vec2):\n    \"\"\"Calculate cosine similarity between two vectors.\"\"\"\n    dot_product = sum(a * b for a, b in zip(vec1, vec2))\n    magnitude1 = sum(a * a for a in vec1) ** 0.5\n    magnitude2 = sum(b * b for b in vec2) ** 0.5\n    if magnitude1 * magnitude2 == 0:\n        return 0\n    return dot_product / (magnitude1 * magnitude2)",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Initialize Pinecone\npinecone.init(api_key=os.getenv(\"PINECONE_API_KEY\"), environment=os.getenv(\"PINECONE_ENVIRONMENT\"))\nindex_name = os.getenv(\"PINECONE_INDEX_NAME\", \"default-index\")\nindex = pinecone.Index(index_name)\n# Initialize sentence transformer model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\ndef get_embedding(text):\n    \"\"\"Generate embedding for given text.\"\"\"\n    return model.encode(text).tolist()",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "index_name",
        "kind": 5,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "index_name = os.getenv(\"PINECONE_INDEX_NAME\", \"default-index\")\nindex = pinecone.Index(index_name)\n# Initialize sentence transformer model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\ndef get_embedding(text):\n    \"\"\"Generate embedding for given text.\"\"\"\n    return model.encode(text).tolist()\ndef check_if_exists_in_pinecone(id):\n    \"\"\"Check if a vector with given id exists in Pinecone.\"\"\"\n    try:",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "index = pinecone.Index(index_name)\n# Initialize sentence transformer model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\ndef get_embedding(text):\n    \"\"\"Generate embedding for given text.\"\"\"\n    return model.encode(text).tolist()\ndef check_if_exists_in_pinecone(id):\n    \"\"\"Check if a vector with given id exists in Pinecone.\"\"\"\n    try:\n        response = index.fetch([id])",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pinecone_module",
        "description": "pinecone_module",
        "peekOfCode": "model = SentenceTransformer('all-MiniLM-L6-v2')\ndef get_embedding(text):\n    \"\"\"Generate embedding for given text.\"\"\"\n    return model.encode(text).tolist()\ndef check_if_exists_in_pinecone(id):\n    \"\"\"Check if a vector with given id exists in Pinecone.\"\"\"\n    try:\n        response = index.fetch([id])\n        exists = id in response['vectors']\n        logger.info(f\"Check if exists in Pinecone for ID {id}: {exists}\")",
        "detail": "pinecone_module",
        "documentation": {}
    },
    {
        "label": "download_transcripts",
        "kind": 2,
        "importPath": "youtube_download_module",
        "description": "youtube_download_module",
        "peekOfCode": "def download_transcripts(video_url, transcript_language, output_dir, output_file_name):\n    \"\"\"Download transcript for a YouTube video.\"\"\"\n    try:\n        ydl_opts = {\n            'writesubtitles': True,\n            'subtitleslangs': [transcript_language],\n            'skip_download': True,\n            'outtmpl': os.path.join(output_dir, f\"{output_file_name}.%(ext)s\"),\n            'quiet': True,\n        }",
        "detail": "youtube_download_module",
        "documentation": {}
    },
    {
        "label": "get_youtube_playlist_count",
        "kind": 2,
        "importPath": "youtube_download_module",
        "description": "youtube_download_module",
        "peekOfCode": "def get_youtube_playlist_count(playlist_url):\n    \"\"\"Get the number of videos in a YouTube playlist.\"\"\"\n    try:\n        ydl_opts = {\n            'quiet': True,\n            'extract_flat': True,\n        }\n        with YoutubeDL(ydl_opts) as ydl:\n            info = ydl.extract_info(playlist_url, download=False)\n            count = len(info['entries'])",
        "detail": "youtube_download_module",
        "documentation": {}
    },
    {
        "label": "get_youtube_playlist_items",
        "kind": 2,
        "importPath": "youtube_download_module",
        "description": "youtube_download_module",
        "peekOfCode": "def get_youtube_playlist_items(playlist_url):\n    \"\"\"Get the list of video titles in a YouTube playlist.\"\"\"\n    try:\n        ydl_opts = {\n            'quiet': True,\n            'extract_flat': True,\n        }\n        with YoutubeDL(ydl_opts) as ydl:\n            info = ydl.extract_info(playlist_url, download=False)\n            videos = [entry['title'] for entry in info['entries']]",
        "detail": "youtube_download_module",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "youtube_download_module",
        "description": "youtube_download_module",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef download_transcripts(video_url, transcript_language, output_dir, output_file_name):\n    \"\"\"Download transcript for a YouTube video.\"\"\"\n    try:\n        ydl_opts = {\n            'writesubtitles': True,\n            'subtitleslangs': [transcript_language],\n            'skip_download': True,\n            'outtmpl': os.path.join(output_dir, f\"{output_file_name}.%(ext)s\"),\n            'quiet': True,",
        "detail": "youtube_download_module",
        "documentation": {}
    }
]